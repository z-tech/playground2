use std::{
    collections::HashMap,
    ops::Add,
    sync::{Arc, Mutex},
};
use openssl::{
    bn::{BigNum,BigNumContext},
    error::ErrorStack,
};
use rayon::prelude::*;

trait BigNumHasher {
    fn hash(bn: &BigNum) -> Result< BigNum, ErrorStack >;
    fn hash_all(bns: Vec<BigNum>) -> Result< Vec<BigNum>, ErrorStack >;
    fn hash_all_pl(bns: Vec<BigNum>) -> Result< Vec<BigNum>, ErrorStack >;
}

struct BigNumPrimeHasher;

impl BigNumHasher for BigNumPrimeHasher {
    fn hash(bn: &BigNum) -> Result< BigNum, ErrorStack > {
        // ensure prime candidate is odd
        let mut pc = (*bn).to_owned().unwrap();
        if !pc.is_bit_set(0) {
            pc.set_bit(0).unwrap();
        }

        // increase by two until we find a prime
        let two = BigNum::from_dec_str("2").unwrap();
        let mut ctx = BigNumContext::new_secure().unwrap();
        while !pc.is_prime(100, &mut ctx).unwrap() {
            pc = pc.add(&two);
        }
        Ok(pc)
    }
    fn hash_all(bns: Vec<BigNum>) -> Result< Vec<BigNum>, ErrorStack > {
        // initialize array of primes
        let mut ps: Vec<BigNum> = Vec::with_capacity(bns.len());
        // for each input map to prime
        for bn in bns.iter() {
            ps.push(BigNumPrimeHasher::hash(bn).unwrap());
        }
        Ok(ps)
    }
    fn hash_all_pl(bns: Vec<BigNum>) -> Result< Vec<BigNum>, ErrorStack > {
        // initialize map of index-prime
        let ps: Arc<Mutex<HashMap<usize, BigNum>>> = Arc::new(Mutex::new(HashMap::new()));
        // for each input map to prime in parallel
        bns.par_iter().enumerate().for_each(|(i, bn)| {
            let prime = BigNumPrimeHasher::hash(bn).unwrap();
            ps.lock().unwrap().insert(i, prime.to_owned().unwrap());
        });
        // iterate through the map and place into vec in correct order
        let mut result: Vec<BigNum> = Vec::with_capacity(bns.len());
        for i in 0..bns.len() {
            result.push((*ps.lock().unwrap().get(&i).unwrap()).to_owned().unwrap());
        }
        Ok(result)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    fn inputs() -> Vec<BigNum> {
        return vec![
            BigNum::from_dec_str("77728531348129034983974467072116624635402970881828592987391241438326088241400919233807631936222117822874591962040900395028592224719588739987806722540992579917735365656312235377912029956504172868924068795481811504700758703553469530508476273190236419245066988776481021363203642622172897415912108116908026161411").unwrap(),
            BigNum::from_dec_str("94691516589347097341320578191035485608539531402479055639737024488550275719877502503015772412907149101998294976619868306700670391291617039087866306675236075014011446915895892454319486111154155577266466800436281341063937152499100326729377741744019914793418982453572257666047261094095427017339251632513923035431").unwrap(),
            BigNum::from_dec_str("14113623431367081224689922115679917264217737879240802001317473701658890233344219754081330015898468271425268280851179353431858115950633700214967274781548102330097398473099217425286988168682215035320167303949862814634830600945395207076814592124889189980481326499922070659274334196980347230461754965444235437397").unwrap(),
            BigNum::from_dec_str("133224123586384136142257618959325046198103636069395723316973080231064005719721928792847734711107927220054104886709053743268307054720194234840828558259896199471696040626725513547254236498292006984358002026485317606464665024403887198765068714020750274172672205623303430183034325510464296222820383799775707405715").unwrap(),
            BigNum::from_dec_str("17517379388365345734779504374207771337391476874036822946324744068999471408524672902833070253030132210405382770105207131956774930505157953754631615060838636360686650885623012734850691642321141804727983157371874019637844954541482689360947499955103350526686731226017809739279145355867855234946387567693769261886").unwrap(),
            BigNum::from_dec_str("12240134768972093352420608665302007771104634664571573698178584068675829127037293102207649786615153458244763654592039750091029570639077772247169467166031568627996617621272764900538915396651506399885883747088530522034392508403385539162038317649919740022179513430141654814635591744802580592685242732805829749432").unwrap(),
            BigNum::from_dec_str("18592513254260126138573453697324764646808024669900993986154586159182784964758957538822398205238974269558008468988609531889010610010606645869035881877173606785025641586166560157179700265901818666578413692775459746753085321325316997480109123841531639938027537763024803162487831739643520103331056941692085542912").unwrap(),
            BigNum::from_dec_str("23757799442381404538111700335686969621392058005014069551785391090850617826459343227390232584831956233098046867814904597105955692690711850805296560920751046686297681015558061792143008869453254357511441552254730589324870024623513632094862328094471442946270323044916781773654199646957750108447870191403822516558").unwrap(),
            BigNum::from_dec_str("13138698358039347859184961325436655867305400673334084507122932614992065213250892917409829661316471911608818413710710789166443626692061700063499395844419399040366991401767203317531737767274808628123403801813757441662496792445009363506106751420410642136508458722442560795151511962387954457500312064927722903306").unwrap(),
            BigNum::from_dec_str("22831493609385643720326988308045369951971596086472295819920311183966663338072002378554748871237097486379383351521290424036269168168008426469039001336161523172347196906614945345982002685286266494202615892439409622281411960850043339390891484653662919767786052919263095191930073372173951851806919496807537993227").unwrap(),
            BigNum::from_dec_str("160521230237105790468145031753213665598102038426746938673223595229889331260005414160658376872340340652363449316640080816277931656990264578011629885331582002336874762184712399849836140302642704237328313354938197119473243644828167013723554980745294418026393485022991808216277142959166934073351213275721643148098").unwrap(),
            BigNum::from_dec_str("147422385000680667309781031312698474493824167620857551035121034883130096236974193123786324895954560364554788800137073183435151122246656186451774893986359318384525575190879544056732293415661741364663689406000247996423255651277991852129907550178264267734162480186736052300978173373968838881231761425749138541381").unwrap(),
            BigNum::from_dec_str("62484158823492509676381445549517052948136173262919407256221080414631304798598945897070194470433402299322892375278906004408276237048716356464930198106254130387556575009915505620295631122820633601467203353965573201758530380413374682141851208169097469074894180775873727311245355316577749898098065827128020643847").unwrap(),
            BigNum::from_dec_str("89973428346491184646321198808500349980012115769574991064974024517216598777462829313436318654320933400927527233556937609191102557462573000213412141866561334362487165834853015188082052940271037715959184204616631622394035259183164751592407232188826524627517609998346009428628072978291286823954549573670690698211").unwrap(),
            BigNum::from_dec_str("175705840159443616963157679294781087790707996009553114540028592027626126922808110201489314468936749423641596488919921623136324322630839268868024455266868831148693217978363099865373250972849972617720279764781143699647763678991047792599951912016929498975408270442605415983880877975321557814599353483025219364878").unwrap(),
            BigNum::from_dec_str("44250404610726511418358979227889006332522235497498273928406646841696430324012222968715739440508431598756013773786872290491380587195481248926747617347734970431737174462425058077096294099957830127028426769881471139255563473267069407901177062458963619497895652378095263817324987318251254040029523342777303940989").unwrap(),
            BigNum::from_dec_str("130638757390507557208895151597823888822093949138540680188544374772076220902171739750864498286916710893491351963938215687146686363761876033484006794619204074227500949979664562755895150299742018734440818623615719742496817308167402116235613963043850435820807554010877008902817554973365183452659364546304045491549").unwrap(),
            BigNum::from_dec_str("59646372819337893601982859608495466502019960273964195881986983595032486680487217985211675599983861548704510478231240834636316984393300498281363152882605885287207313058769408762084546073584312902220206926862777951561218506974855315758497222188280983824026034246237210247852547584925672143634348254826194934962").unwrap(),
            BigNum::from_dec_str("74854895262991389439119998603739515682417396137721311720887035700391616372499046354080851662068143246681246435033357856166551123178851083219106977239434179679556792602727600649038066785439315207584297740609108732089742246962830278209898923539794989296449232151554808880064734003696501596909612865174541772881").unwrap(),
            BigNum::from_dec_str("9897571176563492212731379948947449067106672083563532595562122725183462806713239542168701011264601799588288393521715298430176818810069367931331312954920454043526938521157088133469254799371077405677187190430903388851097947295811377100698553381133860626226710599536569565965257987200835224448009721670031572252").unwrap()
        ];
    }

    fn expects() -> Vec<BigNum> {
        return vec![
            BigNum::from_dec_str("77728531348129034983974467072116624635402970881828592987391241438326088241400919233807631936222117822874591962040900395028592224719588739987806722540992579917735365656312235377912029956504172868924068795481811504700758703553469530508476273190236419245066988776481021363203642622172897415912108116908026161633").unwrap(),
            BigNum::from_dec_str("94691516589347097341320578191035485608539531402479055639737024488550275719877502503015772412907149101998294976619868306700670391291617039087866306675236075014011446915895892454319486111154155577266466800436281341063937152499100326729377741744019914793418982453572257666047261094095427017339251632513923036543").unwrap(),
            BigNum::from_dec_str("14113623431367081224689922115679917264217737879240802001317473701658890233344219754081330015898468271425268280851179353431858115950633700214967274781548102330097398473099217425286988168682215035320167303949862814634830600945395207076814592124889189980481326499922070659274334196980347230461754965444235437437").unwrap(),
            BigNum::from_dec_str("133224123586384136142257618959325046198103636069395723316973080231064005719721928792847734711107927220054104886709053743268307054720194234840828558259896199471696040626725513547254236498292006984358002026485317606464665024403887198765068714020750274172672205623303430183034325510464296222820383799775707406253").unwrap(),
            BigNum::from_dec_str("17517379388365345734779504374207771337391476874036822946324744068999471408524672902833070253030132210405382770105207131956774930505157953754631615060838636360686650885623012734850691642321141804727983157371874019637844954541482689360947499955103350526686731226017809739279145355867855234946387567693769261943").unwrap(),
            BigNum::from_dec_str("12240134768972093352420608665302007771104634664571573698178584068675829127037293102207649786615153458244763654592039750091029570639077772247169467166031568627996617621272764900538915396651506399885883747088530522034392508403385539162038317649919740022179513430141654814635591744802580592685242732805829750461").unwrap(),
            BigNum::from_dec_str("18592513254260126138573453697324764646808024669900993986154586159182784964758957538822398205238974269558008468988609531889010610010606645869035881877173606785025641586166560157179700265901818666578413692775459746753085321325316997480109123841531639938027537763024803162487831739643520103331056941692085543851").unwrap(),
            BigNum::from_dec_str("23757799442381404538111700335686969621392058005014069551785391090850617826459343227390232584831956233098046867814904597105955692690711850805296560920751046686297681015558061792143008869453254357511441552254730589324870024623513632094862328094471442946270323044916781773654199646957750108447870191403822517043").unwrap(),
            BigNum::from_dec_str("13138698358039347859184961325436655867305400673334084507122932614992065213250892917409829661316471911608818413710710789166443626692061700063499395844419399040366991401767203317531737767274808628123403801813757441662496792445009363506106751420410642136508458722442560795151511962387954457500312064927722903593").unwrap(),
            BigNum::from_dec_str("22831493609385643720326988308045369951971596086472295819920311183966663338072002378554748871237097486379383351521290424036269168168008426469039001336161523172347196906614945345982002685286266494202615892439409622281411960850043339390891484653662919767786052919263095191930073372173951851806919496807537993367").unwrap(),
            BigNum::from_dec_str("160521230237105790468145031753213665598102038426746938673223595229889331260005414160658376872340340652363449316640080816277931656990264578011629885331582002336874762184712399849836140302642704237328313354938197119473243644828167013723554980745294418026393485022991808216277142959166934073351213275721643148803").unwrap(),
            BigNum::from_dec_str("147422385000680667309781031312698474493824167620857551035121034883130096236974193123786324895954560364554788800137073183435151122246656186451774893986359318384525575190879544056732293415661741364663689406000247996423255651277991852129907550178264267734162480186736052300978173373968838881231761425749138541739").unwrap(),
            BigNum::from_dec_str("62484158823492509676381445549517052948136173262919407256221080414631304798598945897070194470433402299322892375278906004408276237048716356464930198106254130387556575009915505620295631122820633601467203353965573201758530380413374682141851208169097469074894180775873727311245355316577749898098065827128020645223").unwrap(),
            BigNum::from_dec_str("89973428346491184646321198808500349980012115769574991064974024517216598777462829313436318654320933400927527233556937609191102557462573000213412141866561334362487165834853015188082052940271037715959184204616631622394035259183164751592407232188826524627517609998346009428628072978291286823954549573670690700371").unwrap(),
            BigNum::from_dec_str("175705840159443616963157679294781087790707996009553114540028592027626126922808110201489314468936749423641596488919921623136324322630839268868024455266868831148693217978363099865373250972849972617720279764781143699647763678991047792599951912016929498975408270442605415983880877975321557814599353483025219365943").unwrap(),
            BigNum::from_dec_str("44250404610726511418358979227889006332522235497498273928406646841696430324012222968715739440508431598756013773786872290491380587195481248926747617347734970431737174462425058077096294099957830127028426769881471139255563473267069407901177062458963619497895652378095263817324987318251254040029523342777303941369").unwrap(),
            BigNum::from_dec_str("130638757390507557208895151597823888822093949138540680188544374772076220902171739750864498286916710893491351963938215687146686363761876033484006794619204074227500949979664562755895150299742018734440818623615719742496817308167402116235613963043850435820807554010877008902817554973365183452659364546304045492079").unwrap(),
            BigNum::from_dec_str("59646372819337893601982859608495466502019960273964195881986983595032486680487217985211675599983861548704510478231240834636316984393300498281363152882605885287207313058769408762084546073584312902220206926862777951561218506974855315758497222188280983824026034246237210247852547584925672143634348254826194936113").unwrap(),
            BigNum::from_dec_str("74854895262991389439119998603739515682417396137721311720887035700391616372499046354080851662068143246681246435033357856166551123178851083219106977239434179679556792602727600649038066785439315207584297740609108732089742246962830278209898923539794989296449232151554808880064734003696501596909612865174541773419").unwrap(),
            BigNum::from_dec_str("9897571176563492212731379948947449067106672083563532595562122725183462806713239542168701011264601799588288393521715298430176818810069367931331312954920454043526938521157088133469254799371077405677187190430903388851097947295811377100698553381133860626226710599536569565965257987200835224448009721670031572899").unwrap()
        ];
    }

    #[test]
    fn test_prime_hasher_hash() {
        let inputs = inputs();
        let expects = expects();
        let result: BigNum = BigNumPrimeHasher::hash(&inputs[0]).unwrap();
        assert_eq!(result, expects[0]);
    }
    #[test]
    fn test_prime_hasher_hash_all() {
        let inputs = inputs();
        let expects = expects();
        let result: Vec<BigNum> = BigNumPrimeHasher::hash_all(inputs).unwrap();
        assert_eq!(result, expects);
    }
    #[test]
    fn test_prime_hasher_hash_all_pl() {
        let inputs = inputs();
        let expects = expects();
        let result: Vec<BigNum> = BigNumPrimeHasher::hash_all_pl(inputs).unwrap();
        assert_eq!(result, expects);
    }
}
